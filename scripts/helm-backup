while : ; do
  n=$(kubectl get node  | grep -i ready | awk '{print$1}' | xargs kubectl get node  -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.spec.taints}{"\n"}{end}' | grep -iv noschedule | wc -l 2>&1)
  [ $n -ge 3 ] && break
  sleep 1
  echo Waiting for Kubernetes cluster to come up
done

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
ln -s /usr/local/bin/helm /usr/bin/helm

/usr/local/bin/helm repo add portworx http://charts.portworx.io/ && helm repo update

cat <<EOF | kubectl apply -f -
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: px-repl3
provisioner: kubernetes.io/portworx-volume
parameters:
  repl: "3"
allowVolumeExpansion: true
EOF

# /usr/local/bin/helm install px-backup portworx/px-backup --namespace px-backup --create-namespace --set persistentStorage.enabled=true,persistentStorage.storageClassName="px-repl3",oidc.centralOIDC.updateAdminProfile=false
/usr/local/bin/helm install px-central portworx/px-central --namespace central --create-namespace --version 2.0.1 --set persistentStorage.enabled=true,persistentStorage.storageClassName="px-repl3",pxbackup.enabled=true,oidc.centralOIDC.updateAdminProfile=false

until (kubectl get po --namespace central -ljob-name=pxcentral-post-install-hook  -o wide | awk '{print $1, $2, $3}' |grep "Completed"); do echo "Waiting for post install hook";sleep 3; done
until (kubectl get po --namespace central -lapp=px-backup  -o wide | awk '{print $1, $2, $3}' | grep "Running" | grep "1/1"); do echo "Waiting for backup service";sleep 3; done

# kubectl patch svc px-backup-ui -n px-backup --type='json' -p '[{"op":"replace","path":"/spec/type","value":"NodePort"}]'

BACKUP_POD_NAME=$(kubectl get pods -n central -l app=px-backup -o jsonpath='{.items[0].metadata.name}' 2>/dev/null)
kubectl cp -n central $BACKUP_POD_NAME:pxbackupctl/linux/pxbackupctl /usr/bin/pxbackupctl
chmod +x /usr/bin/pxbackupctl
JQ="docker run -i --rm --name jq endeveit/docker-jq jq"
BACKUP_POD_IP=$(kubectl get pods -n central -l app=px-backup -o jsonpath='{.items[*].status.podIP}' 2>/dev/null)
AWS_ACCESS_KEY=$(sed -n 's/aws_access_key_id[ =]*//p' /root/.aws/credentials 2>/dev/null)
AWS_SECRET_KEY=$(sed -n 's/aws_secret_access_key[ =]*//p' /root/.aws/credentials 2>/dev/null)
pubIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
backupPort=$(kubectl get svc px-backup-ui -n central -o=jsonpath='{.spec.ports[?(@.port==80)].nodePort}')
client_secret=$(kubectl get secret --namespace central pxc-backup-secret -o jsonpath={.data.OIDC_CLIENT_SECRET} | base64 --decode)

# Configures backup with clusters and locations
pxbackupctl login -s http://$pubIP:$backupPort -u admin -p admin
pxbackupctl create cloudcredential --aws-access-key $AWS_ACCESS_KEY --aws-secret-key $AWS_SECRET_KEY -e $BACKUP_POD_IP:10002 --orgID default -n s3 -p aws
sleep 5
cloud_credential_uid=$(pxbackupctl get cloudcredential -e $BACKUP_POD_IP:10002 --orgID default -o json | $JQ -cr '.[0].metadata.uid') 
pxbackupctl create backuplocation --cloud-credential-name s3 --cloud-credential-Uid $cloud_credential_uid -n aws -p s3 --s3-endpoint https://s3.$aws_region.amazonaws.com --path $BACKUP_BUCKET --s3-region $aws_region -e $BACKUP_POD_IP:10002 --orgID default
pxbackupctl create schedulepolicy --interval-minutes 15 --interval-retain 12 --name example-schedule -e $BACKUP_POD_IP:10002 --orgID default
sleep 5
ssh master-2 cat /root/.kube/config > /cluster-2-kube-config
ssh master-3 cat /root/.kube/config > /cluster-3-kube-config
pxbackupctl create cluster --name cluster-2 -k /cluster-2-kube-config -e $BACKUP_POD_IP:10002 --orgID default
pxbackupctl create cluster --name cluster-3 -k /cluster-3-kube-config -e $BACKUP_POD_IP:10002 --orgID default

# Patches Prometheus operator to allow multiple instances to run
kubectl patch deployment prometheus-operator -n kube-system  --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "-namespaces=kube-system" }]'
ssh master-2 <<EOF
kubectl patch deployment prometheus-operator -n kube-system  --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "-namespaces=kube-system" }]'
EOF
ssh master-3 << EOF
kubectl patch deployment prometheus-operator -n kube-system  --type=json -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "-namespaces=kube-system" }]'
EOF

# Enables monitoring and the license server
kubectl label node node-1-1 px/ls=true
kubectl label node node-1-2 px/ls=true

helm get values --namespace central px-central -o yaml > values-px-upgrade.yaml && kubectl delete job pxcentral-post-install-hook --namespace central && helm upgrade px-central portworx/px-central --namespace central --version 2.0.1 --set pxlicenseserver.enabled=true,pxmonitor.enabled=true,persistentStorage.enabled=true,persistentStorage.storageClassName="px-repl3",installCRDs=true,pxmonitor.pxCentralEndpoint=$pubIP:$backupPort -f values-px-upgrade.yaml

until (kubectl get po --namespace central -ljob-name=pxcentral-post-install-hook  -o wide | awk '{print $1, $2, $3}' |grep "Completed"); do echo "Waiting for post install hook";sleep 3; done

cat <<EOF >> /etc/motd
+================================================+
SAVE THE FOLLOWING DETAILS FOR FUTURE REFERENCES
+================================================+
PX-Central User Interface Access URL : http://$pubIP:$backupPort
PX-Central admin user name: admin
PX-Central admin user password: admin
+================================================+
EOF

